version: "3.8"

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver:  local
  logstashdata01:
    driver: local
  metricbeatdata01:
    driver: local
  postgres_data:
    driver: local
  app_data: 
    driver: local

networks:
  default:
    name: transcendence
    external: false

services:
  setup:
    container_name: setup
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - "./elk/.script.sh:/usr/share/elasticsearch/.script.sh:ro"
    env_file:
      - .env
    user: "0"
    command: "./.script.sh && ./.ilm.sh"
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    container_name: es01
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    env_file:
      - .env
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    container_name: kibana
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
      - "./elk/kibana.yml:/usr/share/kibana/config/kibana.yml:ro"
      - "./elk/.ilm.sh:/usr/share/kibana/config/.ilm.sh:ro"
    ports:
      - ${KIBANA_PORT}:5601
    env_file:
      - .env
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I -k https://localhost:5601 | grep -q 'HTTP/1.1 302 Found' && ./config/.ilm.sh && \
          (curl -s -k -o /dev/null -w '%{http_code}' -X GET -u ${ELASTIC_USER}:${ELASTIC_PASSWORD} ${ELASTICSEARCH_HOSTS}/_ilm/policy/${ILM_POLICY_NAME1} -H 'Content-Type: application/json' | grep -q '200') && \
          (curl -s -k -o /dev/null -w '%{http_code}' -X GET -u ${ELASTIC_USER}:${ELASTIC_PASSWORD} ${ELASTICSEARCH_HOSTS}/_ilm/policy/${ILM_POLICY_NAME2} -H 'Content-Type: application/json' | grep -q '200')",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
  
  logstash01:
    container_name: logstash
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata01:/usr/share/logstash/data
      - "./elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
      - "./elk/postgresql-42.7.2.jar:/usr/share/java/postgresql-42.7.2.jar"
    environment:
      - xpack.monitoring.enabled=false
    env_file:
      - .env
    ports:
      - "127.0.0.1:1337:1337/udp"
  
  metricbeat01:
    container_name: metricbeat
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
    user: root
    volumes:
      - certs:/usr/share/metricbeat/certs
      - metricbeatdata01:/usr/share/metricbeat/data
      - "./elk/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
    env_file:
      - .env
    command:
      - --strict.perms=false

  postgres:
    container_name: postgres
    image: postgres:14-alpine
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    restart: always

  app:
    image: back:1.0
    build: ./back/
    container_name: back
    depends_on:
      - postgres
    entrypoint: "./docker-entrypoint.sh"
    ports:
      - 8000:8000
    env_file:
      - .env
    logging:
      driver: gelf
      options:
        gelf-address: "udp://127.0.0.1:1337"
    restart: always

  front:
    image: front:1.0
    build: ./front/
    container_name: front
    # depends_on:
      # - postgres
    entrypoint: "./docker-entrypoint.sh"
    # command: "node server.js"
    ports:
      - 8080:8080
    env_file:
      - .env
    # logging:
    #   driver: gelf
    #   options:
    #     gelf-address: "udp://127.0.0.1:1337"
    restart: always